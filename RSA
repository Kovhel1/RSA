#RSA -  Rivest, Shamir and Aldeman

import random

#генерация простых чисел
def Resheto_Erastofena(max_number):
    all_numbers_to_max = list()
    for i in range(2, max_number):
        all_numbers_to_max.append(i)
    mass_len = max_number - 2
    
    for i in range(2, max_number):
        for j  in range(0, mass_len):
            if all_numbers_to_max[j] == i:
                for l in range(j+1, mass_len):
                    if all_numbers_to_max[l]%i == 0:
                        all_numbers_to_max[l] = 1
    
    erasto_list = list()
    for i in range(0, mass_len):
        if all_numbers_to_max[i]!=1:
            erasto_list.append(all_numbers_to_max[i])
            mass_len-=1
    
    del all_numbers_to_max
    return erasto_list
    
#кратность делителя    
def kr (n, dell):
    k = 1 
    while n % (dell**k) == 0:
        k += 1
    k -= 1
    return k

#разложение числа на простые множители 
#результат:[ [множитель1, множитель2...], [кратность1, кратность2...] ]
def Multi(n):
    mn = [] 
    kratn = []
    dell = 2
    while dell <= n :
        if n % dell == 0:
            mn.append(dell)
            
            k = kr (n, dell) #кратность
            kratn.append(k)
            
            n = n / (dell**k)
            
        dell += 1

    result = [mn, kratn]
    return result

# узнаем, являются ли числа списка spisok_chisel взаимнопростыми
# результат: если 1 - взаимнопростые, если 0 - имеют общие простые множители
def prost(spisok_chisel):
    
    common = list() 
    
    for number in spisok_chisel:
        common.extend(Multi(number)[0])
        
    for i in common:
        if common.count(i) >= 2:
            return 0
    return 1

#шифровка и расшифровка
def endecription(endecripted_message, n, e_or_d):
    return (endecripted_message**e_or_d)%n
    

def main():

#ОТКРЫТЫЙ КЛЮЧ {e, n}
#Я отправляю его вам, чтобы вы зашифровали своё сообщение. 
    #Выбираю два простых числа.
    # n должно соответствовать алфавиту т.к. сообщение не должно быть больше n, 
    #поэтому min_n = корень(максимальное число алфавита)
    min_q = 23
    max_p = 29
    
    n = max_p*min_q
    print("соощение не должно быть больше n = ", n)
    print("иначе смените min_q!")
    
    #Вычисляем функцию Эйлера
    f = (min_q-1)*(max_p-1) 
    
    #Выбираем число e
    izi_chisla_do_f = Resheto_Erastofena(f)
    #пройдемся по списку  и первое взаимнопростое возьмем за е
    for i in range(0, f):
        spisok_chisel = [f, i]
        if prost(spisok_chisel) == 0:
            e = izi_chisla_do_f[i]  
            break


#ЗАКРЫТЫЙ КЛЮЧ {d, n}
    d = 1
    while ((e*d)%f != 1):
        d+=1
    
#СООБЩЕНИЕ 
    #Здесь важно напомнить, что сообщение не должно быть больше n=21. иначе ничего не получится.
    message = 25
    print("message = ", message)
    
#ШИФРОВАНИЕ
    encripted_message = endecription(message, n, e)
    print("encripted_message = ", encripted_message)
    
#РАСШИФРОВКА
    decripted_message = endecription(encripted_message, n, d)
    print("decripted_message = ", decripted_message)

main()
